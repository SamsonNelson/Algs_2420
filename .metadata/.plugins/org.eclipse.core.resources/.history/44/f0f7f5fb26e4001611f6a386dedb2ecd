package percolation;

import edu.princeton.cs.algs4.UF;

/**
 * 
 * @author Samson Nelson
 * Assignment Percolation
 * Feb 4th 2017
 * 
 */

public class Percolation {
	
	private int n;
	private UF unionFind;

	public Percolation(int n) {
		this.n = n;
		this.unionFind = new UF((n*n) + 2);
		initializeUF();
	}
	
	// Connecting top row to "Top 0"
	private void initializeUF() {
		for (int i = 0; i < n; i++) {
			unionFind.union(0, i);
			unionFind.union((n*n) + n + 1 + i, n*n);
		}
	}
	
	// Takes 2D array and converts to 1D array
	private int xyTo1d(int x, int y) {
		return ((x*n) + y + 1);
	}
	
	// Check to see if open
	// Method opens box and makes union if connected to surrounding open box
	// Return Value
	// Keep track of open tiles
	public void open(int x, int y) {
		unionFind.union(x, y);
		return;
	}
	
	// Checks to see if site is open
	// If statement to see if value on array for tile is true or false
	public boolean isOpen(int x, int y) {
		return false;
	}
	
	// Checks to see if site is in a component that connects to "Top 0"
	public boolean isFull(int x, int y) {
		if (unionFind.connected(x, y)) {
			return true;
		} else {
			return false;
		}
	}
	
	// Checks to see if "Top 0" connects to bottom "n*n+2"
	public boolean percolates() {
		return false;
	}

	// Returns number of open sites
	public int numberOfOpenSites() {
		return unionFind.count();
	}

}
